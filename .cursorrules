Assume the development environment is a macOS machine with the following tools installed:
- Cursor
- Docker Desktop
- Git
- Helm
- Kind
- Kubectl
- Kustomize
- PowerShell
- Visual Studio Code

Use 2 spaces for tabs.
For any instructions, assume that a script or code should be created/updated.
Prefer updating existing scripts rather than creating new ones.
Use shell scripts where possible.
Ensure any scripts can be run multiple times without errors.
For any applications that need to be run, use containers where possible.
Prefer deploying to Kubernetes clusters using helm rather than kustomize.
When deploying any applications that have credentials, provide instructions on how to fetch the credentials using a script.
Any code created should be production grade.
When creating any collections, always sort them alphabetically, unless the other has some functional use.
When creating tests, use a given, when, then style for naming.
When creating tests, use an arrange/act/assert style for the test implementation.
When creating tests, prefer creating a few integration tests rather than granular class or function level unit tests. Use mocks/fakes/stubs/service virtualization to simulate dependencies.
When writing code, prefer using the latest version of the language features.
When writing code, use the latest available version of packages.
When writing code, always pin versions for any dependencies to enable deterministic builds.
When writing code, use consistent naming conventions.
When writing code, prefer simple smaller functions with a single purpose, generally try to keep a function at or below 10 lines of code, but don't do this if it introduces unnecessary complexity.
When creating tests, feel free to refactor project code to make testing easier.
When creating APIs, think about making them backward compatible, and design them in a way that they can be easily extended without impacting existing callers.
When creating UIs, consider the UX of the UI and make sure it is easy to use and understand. Make it beautiful and modern, but keep it clean and simple.
Keep configuration to a minimum, only introduce configuration when absolutely necessary.
Always consider the performance and security implications of any changes.
Don't add unnecessary comments to code, prefer naming and structuring code in a way that is easy to understand.
When writing code, always consider that it will be running in a container on a Kubernetes cluster. Cater for any issues that may arise from this (e.g. shut down gracefully, etc.).
When creating UIs, always provider light and dark modes and ensure they are consistent with one another.
